Multiline blocks should be enclosed in curly braces
A close curly brace should be located at the beginning of a line
Control structures should use curly braces
Declarations and initializations should be as concise as possible
Assignments should not be made from within sub-expressions
Redundant parentheses should not be used
Values should not be uselessly incremented
"Any()" should be used to test for emptiness
CA2210: Assemblies should have valid strong names
Invalid Character
Methods should not be empty
Variables should not be checked against the values they're about to be assigned
CA1405: COM visible type base types should be COM visible
CA1411: COM registration methods should not be visible
CA1401: P/Invokes should not be visible
CA2222: Do not decrease inherited member visibility
CA2122: Do not indirectly expose methods with link demands
CA1809: Avoid excessive locals
CA1404: Call GetLastError immediately after P/Invoke
"string.ToCharArray()" should not be called redundantly
Skipped unit tests should be either removed or fixed
CA5122: P/Invoke declarations should not be safe critical
Source files should not have any duplicated blocks
Local variables should not shadow class fields
Lines should not be too long
Flags enumerations should explicitly initialize all their members
Result of integer division should not be assigned to floating point variable
Modulus results should not be checked for direct equality
Instance members should not write to "static" fields
Fields that are only assigned in the constructor should be "readonly"
Private fields only used as local variables in methods should become local variables
Static fields should appear in the order they must be initialized
Public constant members should not be used
Static fields should not be used in generic types
CA1301: Avoid duplicate accelerators
Boolean literals should not be redundant
"async" and "await" should not be used as identifiers
CA2243: Attribute string literals should parse correctly
CA1016: Mark assemblies with AssemblyVersionAttribute
Inner class members should not shadow outer class "static" or type members
Members should not be initialized to default values
Constructors should only call non-overridable methods
Source files should have a sufficient density of comment lines
CA2219: Do not raise exceptions in exception clauses
"async" methods should not return "void"
Public methods should not have multidimensional array parameters
Optional parameters should be passed to "base" calls
One-way "OperationContract" methods should have "void" return type
Delegates should not be subtracted
Empty "default" clauses in a "switch" should be removed
Useless "if(true) {...}" and "if(false){...}" blocks should be removed
Empty "case" clauses that fall through to the "default" should be omitted
Overly Long File
Files should not have too many lines
CA2224: Override equals on overloading operator equals
CA1046: Do not overload operator equals on reference types
CA2226: Operators should have symmetrical overloads
"partial" method parameter names should match
CA1013: Overload operator equals on overloading add and subtract
CA2231: Overload operator equals on overriding ValueType.Equals
CA2218: Override GetHashCode on overriding Equals
CA2225: Operator overloads have named alternates
CA1007: Use generics where appropriate
CA1045: Do not pass types by reference
CA1021: Avoid out parameters
CA1057: String URI overloads call System.Uri overloads
CA1006: Do not nest generic types in member signatures
CA1026: Default parameters should not be used
CA1025: Replace repetitive arguments with params array
CA2223: Members should differ by more than return type
CA1055: URI return values should not be strings
CA1030: Use events where appropriate
Methods and properties should be named in camel case
Flags enumerations zero-value members should be named "None"
"params" should not be introduced on overrides
"GetHashCode" should not reference mutable fields
CA2123: Override link demands should be identical to base
Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"
Method overrides should not change parameter defaults
"params" should be used on overrides
Constructor and destructor declarations should not be redundant
CA1038: Enumerators should be strongly typed
CA1815: Override equals and operator equals on value types
CA1049: Types that own native resources should be disposable
CA1000: Do not declare static members on generic types
CA1058: Types should not extend certain base types
CA1048: Do not declare virtual members in sealed types
CA1036: Override methods on comparable types
CA1001: Types that own disposable fields should be disposable
CA1047: Do not declare protected members in sealed types
CA2216: Disposable types should declare finalizer
CA1408: Do not use AutoDual ClassInterfaceType
CA1402: Avoid overloads in COM visible interfaces
CA1409: Com visible types should be creatable
CA1407: Avoid static members in COM visible types
CA1039: Lists are strongly typed
CA1035: ICollection implementations have strongly typed members
CA1032: Implement standard exception constructors
Method overloads with default parameter values should not overlap
Generic type parameters should be co/contravariant when possible
Runtime type checking should be simplified
CA1822: Mark members as static
CA1024: Use properties where appropriate
CA1052: Static holder types should be sealed
Redundant modifiers should be removed
CA1703: Resource strings should be spelled correctly
CA1701: Resource string compound words should be cased correctly
CA1800: Do not cast unnecessarily
Redundant casts should not be used
CA1062: Validate arguments of public methods
CA1709: Identifiers should be cased correctly
CA1702: Compound words should be cased correctly
CA2232: Mark Windows Forms entry points with STAThread
CA2144: Transparent code should not load assemblies from byte arrays
CA1014: Mark assemblies with CLSCompliantAttribute
CA1017: Mark assemblies with ComVisibleAttribute
CA2002: Do not lock on objects with weak identity
Overriding members should do more than simply call the same member in the super class
Non-constant static fields should not be visible
CA1002: Do not expose generic lists
CA1413: Avoid non-public fields in COM visible value types
CA2211: Non-constant fields should not be visible
CA2112: Secured types should not expose fields
CA1051: Do not declare visible instance fields
"ServiceContract" and "OperationContract" attributes should be used together
Methods should not return values that are never used
"ConfigureAwait(false)" should be used
Classes with "IDisposable" members should implement "IDisposable"
Public constant members should not be used
"for" loop incrementers should modify the variable being tested in the loop's stop condition
"for" loop stop conditions should be invariant
"Explicit" conversions of "foreach" loops should not be used
Culture should be specified for "string" operations
CA2241: Provide correct arguments to formatting methods
Format strings should be passed the correct number of arguments
"string.Format()" should not be called without placeholders
CA1725: Parameter names should match base declaration
Events should be invoked
CA1050: Declare types in namespaces
CA1033: Interface methods should be callable by child types
"IEnumerable" LINQs should be simplified
CA1303: Do not pass literals as localized parameters
CA1004: Generic methods should provide type parameter
CA1054: URI parameters should not be strings
"value" parameters should be used
Classes should not have only "private" constructors
CA1304: Specify CultureInfo
CA2132: Default constructors must be at least as critical as base type default constructors
CA2207: Initialize value type static fields inline
CA1009: Declare event handlers correctly
"==" should not be used when "Equals" is overridden
"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
break statements should not be used except for switch cases
CA1700: Do not name enum values 'Reserved'
CA1726: Use preferred terms
CA1040: Avoid empty interfaces
Field-like events should not be virtual
"IndexOf" checks should not be for positive numbers
CA1010: Collections should implement generic interface
CA1020: Avoid namespaces with few types
CA1821: Remove empty finalizers
Redundant property names should be omitted in anonymous classes
CA1005: Avoid excessive parameters on generic types
CA2004: Remove calls to GC.KeepAlive
Console logging should not be used
Enumeration type names should not have "Flags" or "Enum" suffixes
Attribute, EventArgs, and Exception type names should end with the type being extended
Types should be named in camel case
CA1500: Variable names should not match field names
CA1724: Type Names Should Not Match Namespaces
CA1719: Parameter names should not match member names
Floating point numbers should not be tested for equality
CA1309: Use ordinal StringComparison
CA2242: Test for NaN correctly
Unassigned members should be removed
Dead stores should be removed
Unused private types or members should be removed
CA1823: Avoid unused private fields
Doubled prefix operators "!!" and "~~" should not be used
Boolean checks should not be inverted
Unused type parameters should be removed
Unused method parameters should be removed
CA1801: Review unused parameters
Default parameter values should not be passed as arguments
CA1811: Avoid uncalled private code
CA1003: Use generic event handler instances
Anonymous delegates should not be used to unsubscribe from Events
"switch" statements should have at least 3 "case" clauses
"switch" statements should not have too many "case" clauses
Control flow statements "if", "for", "foreach", "do", "while", "switch" and "try" should not be nested too deeply
CA1031: Do not catch general exception types
CA2102: Catch non-CLSCompliant exceptions in general handlers
CA2221: Finalizers should be protected
Related "if/else if" statements should not have the same condition
Sequential tests should not check the same condition
Collapsible "if" statements should be merged
Two branches in the same conditional structure should not have exactly the same implementation
Variables should not be self-assigned
"=+" should not be used instead of "+="
Assignments should not be made from within sub-expressions
Unused local variables should be removed
CA1804: Remove unused locals
CA1813: Avoid unsealed attributes
CA1814: Prefer jagged arrays over multidimensional
CA1802: Use Literals Where Appropriate
Tabulation characters should not be used
CA2204: Literals should be spelled correctly
CA1308: Normalize strings to uppercase
"IEnumerable" LINQs should be simplified
Doubled prefix operators "!!" and "~~" should not be used
Boolean checks should not be inverted
Inheritance list should not be redundant
Sections of code should not be "commented out"
Empty statements should be removed
Nested blocks of code should not be left empty
CA1506: Avoid excessive class coupling
CA2213: Disposable fields should be disposed
CA2220: Finalizers should call base class finalizer
Classes should "Dispose" of members from the classes' own "Dispose" methods
Objects should not be created to be dropped immediately without being used
CA1065: Do not raise exceptions in unexpected locations
CA1713: Events should not have before or after prefix
CA1504: Review misleading field names
CA1712: Do not prefix enum values with type name
CA1707: Identifiers should not contain underscores
CA1714: Flags enums should have plural names
CA1715: Identifiers should have correct prefix
CA1722: Identifiers should not have incorrect prefix
CA1704: Identifiers should be spelled correctly
CA1710: Identifiers should have correct suffix
CA1711: Identifiers should not have incorrect suffix
CA1720: Identifiers should not contain type names
CA1717: Only FlagsAttribute enums should have plural names
CA1716: Identifiers should not match keywords
CA1056: URI properties should not be strings
CA1708: Identifiers should differ by more than case
CA2214: Do not call overridable methods in constructors
CA1502: Avoid excessive complexity
CA2233: Operations should not overflow
"goto" statement should not be used
Methods should not be too complex
CA1011: Consider passing base types as parameters
"IDisposables" created in a "using" statement should not be returned
CA1063: Implement IDisposable correctly
CA1053: Static holder types should not have constructors
The ternary operator should not return the same value regardless of the condition
Statements should be on separate lines
Generic parameters not constrained to reference types should not be compared to "null"
CA2003: Do not treat fibers as threads
Array covariance should not be used
Non-flags enums should not be used in bitwise operations
Right operands of shift operators should be integers
Namespaces should not be empty
CA2107: Review deny and permit only usage
Parameters with "[DefaultParameterValue]" attributes should also be marked with "[Optional]"
Property assignments should not be made for "readonly" fields not constrained to reference types
CA2227: Collection properties should be read only
Write-only properties should not be used
CA1044: Properties should not be write only
Exceptions should not be thrown from property getters
CA1043: Use integral or string argument for indexers
CA1023: Indexers should not be multidimensional
CA1721: Property names should not match get methods
Trivial properties should be auto-implemented
CA2201: Do not raise reserved exception types
Expressions should not be too complex
Methods should not have too many parameters
CA2230: Use params for variable arguments
CA2202: Do not dispose objects multiple times
"catch" clauses should do more than rethrow
CA2006: Use SafeHandle to encapsulate native resources
Silly bit operations should not be performed
CA1061: Do not hide base class methods
Child class members should not shadow parent class members
CA1812: Avoid uninstantiated internal classes
Literal suffixes should be upper case
The simplest possible condition syntax should be used
Short-circuit logic should be used to prevent null pointer dereferences in conditionals
CA1713: Events should not have before or after prefix
CA1504: Review misleading field names
CA1712: Do not prefix enum values with type name
CA1707: Identifiers should not contain underscores
CA1714: Flags enums should have plural names
CA1715: Identifiers should have correct prefix
CA1722: Identifiers should not have incorrect prefix
CA1704: Identifiers should be spelled correctly
CA1710: Identifiers should have correct suffix
CA1711: Identifiers should not have incorrect suffix
CA1720: Identifiers should not contain type names
CA1717: Only FlagsAttribute enums should have plural names
CA1716: Identifiers should not match keywords
CA1056: URI properties should not be strings
CA1708: Identifiers should differ by more than case
Inheritance list should not be redundant
Overriding members should do more than simply call the same member in the super class
"async" methods should not return "void"
Public methods should not have multidimensional array parameters
Optional parameters should be passed to "base" calls
One-way "OperationContract" methods should have "void" return type
CA2224: Override equals on overloading operator equals
CA1046: Do not overload operator equals on reference types
CA2226: Operators should have symmetrical overloads
"partial" method parameter names should match
CA1013: Overload operator equals on overloading add and subtract
CA2231: Overload operator equals on overriding ValueType.Equals
CA2218: Override GetHashCode on overriding Equals
CA2225: Operator overloads have named alternates
An abstract class should have both abstract and concrete methods
"==" should not be used when "Equals" is overridden
"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
CA1011: Consider passing base types as parameters
CA1063: Implement IDisposable correctly
CA1053: Static holder types should not have constructors
Constructor and destructor declarations should not be redundant
CA1038: Enumerators should be strongly typed
CA1815: Override equals and operator equals on value types
CA1049: Types that own native resources should be disposable
CA1000: Do not declare static members on generic types
CA1058: Types should not extend certain base types
CA1048: Do not declare virtual members in sealed types
CA1036: Override methods on comparable types
CA1001: Types that own disposable fields should be disposable
CA1047: Do not declare protected members in sealed types
CA2216: Disposable types should declare finalizer
CA1408: Do not use AutoDual ClassInterfaceType
CA1402: Avoid overloads in COM visible interfaces
CA1409: Com visible types should be creatable
CA1407: Avoid static members in COM visible types
CA1039: Lists are strongly typed
CA1035: ICollection implementations have strongly typed members
CA1032: Implement standard exception constructors
Generic type parameters should be co/contravariant when possible
Array covariance should not be used
Interfaces with colliding, inherited members should explicitly redefine interface members
"interface" instances should not be cast to concrete types
Local variables should not shadow class fields
CA1810: Initialize reference type static fields inline
"ToString()" method should not return null
"switch" statements should have at least 3 "case" clauses
"switch" statements should not have too many "case" clauses
Control flow statements "if", "for", "foreach", "do", "while", "switch" and "try" should not be nested too deeply
CA1062: Validate arguments of public methods
"async" and "await" should not be used as identifiers
CA2243: Attribute string literals should parse correctly
CA1016: Mark assemblies with AssemblyVersionAttribute
Members should not be initialized to default values
Constructors should only call non-overridable methods
IP addresses should not be hardcoded
Multiline blocks should be enclosed in curly braces
A close curly brace should be located at the beginning of a line
Control structures should use curly braces
CA2002: Do not lock on objects with weak identity
Overriding members should do more than simply call the same member in the super class
Non-constant static fields should not be visible
CA1002: Do not expose generic lists
CA1413: Avoid non-public fields in COM visible value types
CA2211: Non-constant fields should not be visible
CA2112: Secured types should not expose fields
CA1051: Do not declare visible instance fields
CA1050: Declare types in namespaces
CA1033: Interface methods should be callable by child types
CA1041: Provide ObsoleteAttribute message
CA2149: Transparent methods must not call into native code
CA2136: Members should not have conflicting transparency annotations
CA1018: Mark attributes with AttributeUsageAttribute
"[Optional]" should not be used on "ref" or "out" parameters
"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant
CA1405: COM visible type base types should be COM visible
CA1411: COM registration methods should not be visible
CA1401: P/Invokes should not be visible
CA2222: Do not decrease inherited member visibility
CA2122: Do not indirectly expose methods with link demands
CA1809: Avoid excessive locals
"==" should not be used when "Equals" is overridden
"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
CA1404: Call GetLastError immediately after P/Invoke
CA1700: Do not name enum values 'Reserved'
Redundant property names should be omitted in anonymous classes
CA1005: Avoid excessive parameters on generic types
CA2004: Remove calls to GC.KeepAlive
Fields should be private
CA1012: Abstract types should not have constructors
CA1501: Avoid excessive inheritance
CA1034: Nested types should not be visible
CA1059: Members should not expose certain concrete types
CA1064: Exceptions should be public
Interfaces with colliding, inherited members should explicitly redefine interface members
"interface" instances should not be cast to concrete types
Source files should not have any duplicated blocks
"ToString()" method should not return null
CA1819: Properties should not return arrays
Inner class members should not shadow outer class "static" or type members
IP addresses should not be hardcoded
Sections of code should not be "commented out"
Empty statements should be removed
Nested blocks of code should not be left empty
"async" methods should not return "void"
Public methods should not have multidimensional array parameters
Optional parameters should be passed to "base" calls
One-way "OperationContract" methods should have "void" return type
Overly Long File
Files should not have too many lines
CA2214: Do not call overridable methods in constructors
CA2224: Override equals on overloading operator equals
CA1046: Do not overload operator equals on reference types
CA2226: Operators should have symmetrical overloads
"partial" method parameter names should match
CA1013: Overload operator equals on overloading add and subtract
CA2231: Overload operator equals on overriding ValueType.Equals
CA2218: Override GetHashCode on overriding Equals
CA2225: Operator overloads have named alternates
CA1502: Avoid excessive complexity
CA2233: Operations should not overflow
"goto" statement should not be used
Methods should not be too complex
CA1011: Consider passing base types as parameters
CA2223: Members should differ by more than return type
CA1055: URI return values should not be strings
CA1030: Use events where appropriate
Methods and properties should be named in camel case
"IDisposables" created in a "using" statement should not be returned
CA1063: Implement IDisposable correctly
CA1053: Static holder types should not have constructors
Statements should be on separate lines
Method overloads with default parameter values should not overlap
Generic parameters not constrained to reference types should not be compared to "null"
Generic type parameters should be co/contravariant when possible
Types and "this" should not be used for locking
CA2107: Review deny and permit only usage
Parameters with "[DefaultParameterValue]" attributes should also be marked with "[Optional]"
"FIXME" tags should be handled
"TODO" tags should be handled
CA1028: Enum storage should be Int32
CA1027: Mark enums with FlagsAttribute
CA1008: Enums should have zero value
CA2217: Do not mark enums with FlagsAttribute
Property assignments should not be made for "readonly" fields not constrained to reference types
CA2227: Collection properties should be read only
Write-only properties should not be used
CA1044: Properties should not be write only
Exceptions should not be thrown from property getters
CA1043: Use integral or string argument for indexers
CA1023: Indexers should not be multidimensional
CA1721: Property names should not match get methods
Trivial properties should be auto-implemented
CA2201: Do not raise reserved exception types
Expressions should not be too complex
Methods should not have too many parameters
CA2230: Use params for variable arguments
CA2202: Do not dispose objects multiple times
CA1062: Validate arguments of public methods
CA1019: Define accessors for attribute arguments
CA1061: Do not hide base class methods
Child class members should not shadow parent class members
CA1505: Avoid unmaintainable code
Inheritance list should not be redundant
An abstract class should have both abstract and concrete methods
Constructors should only call non-overridable methods
Constructor and destructor declarations should not be redundant
CA1038: Enumerators should be strongly typed
CA1815: Override equals and operator equals on value types
CA1049: Types that own native resources should be disposable
CA1000: Do not declare static members on generic types
CA1058: Types should not extend certain base types
CA1048: Do not declare virtual members in sealed types
CA1036: Override methods on comparable types
CA1001: Types that own disposable fields should be disposable
CA1047: Do not declare protected members in sealed types
CA2216: Disposable types should declare finalizer
CA1408: Do not use AutoDual ClassInterfaceType
CA1402: Avoid overloads in COM visible interfaces
CA1409: Com visible types should be creatable
CA1407: Avoid static members in COM visible types
CA1039: Lists are strongly typed
CA1035: ICollection implementations have strongly typed members
CA1032: Implement standard exception constructors
CA2002: Do not lock on objects with weak identity
Overriding members should do more than simply call the same member in the super class
Declarations and initializations should be as concise as possible
Assignments should not be made from within sub-expressions
"Any()" should be used to test for emptiness
CA1725: Parameter names should match base declaration
CA2210: Assemblies should have valid strong names
Invalid Character
CA1009: Declare event handlers correctly
"==" should not be used when "Equals" is overridden
"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
break statements should not be used except for switch cases
CA1700: Do not name enum values 'Reserved'
CA1726: Use preferred terms
Field-like events should not be virtual
Skipped unit tests should be either removed or fixed
Local variables should not shadow class fields
Lines should not be too long
Enumeration type names should not have "Flags" or "Enum" suffixes
Attribute, EventArgs, and Exception type names should end with the type being extended
Types should be named in camel case
CA1500: Variable names should not match field names
CA1724: Type Names Should Not Match Namespaces
CA1719: Parameter names should not match member names
"ToString()" method should not return null
Doubled prefix operators "!!" and "~~" should not be used
Boolean checks should not be inverted
CA1811: Avoid uncalled private code
CA1003: Use generic event handler instances
Anonymous delegates should not be used to unsubscribe from Events
"switch" statements should have at least 3 "case" clauses
"switch" statements should not have too many "case" clauses
Control flow statements "if", "for", "foreach", "do", "while", "switch" and "try" should not be nested too deeply
"async" and "await" should not be used as identifiers
Related "if/else if" statements should not have the same condition
Sequential tests should not check the same condition
Collapsible "if" statements should be merged
Two branches in the same conditional structure should not have exactly the same implementation
Variables should not be self-assigned
"=+" should not be used instead of "+="
Assignments should not be made from within sub-expressions
Constructors should only call non-overridable methods
Tabulation characters should not be used
CA2204: Literals should be spelled correctly
CA1308: Normalize strings to uppercase
"IEnumerable" LINQs should be simplified
Sections of code should not be "commented out"
Empty statements should be removed
Nested blocks of code should not be left empty
"async" methods should not return "void"
Public methods should not have multidimensional array parameters
Optional parameters should be passed to "base" calls
One-way "OperationContract" methods should have "void" return type
CA1713: Events should not have before or after prefix
CA1504: Review misleading field names
CA1712: Do not prefix enum values with type name
CA1707: Identifiers should not contain underscores
CA1714: Flags enums should have plural names
CA1715: Identifiers should have correct prefix
CA1722: Identifiers should not have incorrect prefix
CA1704: Identifiers should be spelled correctly
CA1710: Identifiers should have correct suffix
CA1711: Identifiers should not have incorrect suffix
CA1720: Identifiers should not contain type names
CA1717: Only FlagsAttribute enums should have plural names
CA1716: Identifiers should not match keywords
CA1056: URI properties should not be strings
CA1708: Identifiers should differ by more than case
CA2224: Override equals on overloading operator equals
CA1046: Do not overload operator equals on reference types
CA2226: Operators should have symmetrical overloads
"partial" method parameter names should match
CA1013: Overload operator equals on overloading add and subtract
CA2231: Overload operator equals on overriding ValueType.Equals
CA2218: Override GetHashCode on overriding Equals
CA2225: Operator overloads have named alternates
An abstract class should have both abstract and concrete methods
CA1007: Use generics where appropriate
CA1045: Do not pass types by reference
CA1021: Avoid out parameters
CA1057: String URI overloads call System.Uri overloads
CA1006: Do not nest generic types in member signatures
CA1026: Default parameters should not be used
CA1025: Replace repetitive arguments with params array
CA2223: Members should differ by more than return type
CA1055: URI return values should not be strings
CA1030: Use events where appropriate
Methods and properties should be named in camel case
Flags enumerations zero-value members should be named "None"
The length returned from a stream read should be checked
CA1063: Implement IDisposable correctly
CA1053: Static holder types should not have constructors
Statements should be on separate lines
Failed unit tests should be fixed
CA1038: Enumerators should be strongly typed
CA1815: Override equals and operator equals on value types
CA1049: Types that own native resources should be disposable
CA1000: Do not declare static members on generic types
CA1058: Types should not extend certain base types
CA1048: Do not declare virtual members in sealed types
CA1036: Override methods on comparable types
CA1001: Types that own disposable fields should be disposable
CA1047: Do not declare protected members in sealed types
CA2216: Disposable types should declare finalizer
CA1408: Do not use AutoDual ClassInterfaceType
CA1402: Avoid overloads in COM visible interfaces
CA1409: Com visible types should be creatable
CA1407: Avoid static members in COM visible types
CA1039: Lists are strongly typed
CA1035: ICollection implementations have strongly typed members
CA1032: Implement standard exception constructors
Method overloads with default parameter values should not overlap
Branches should have sufficient coverage by unit tests
Array covariance should not be used
CA2107: Review deny and permit only usage
Parameters with "[DefaultParameterValue]" attributes should also be marked with "[Optional]"
CA1302: Do not hardcode locale specific strings
CA1703: Resource strings should be spelled correctly
CA1701: Resource string compound words should be cased correctly
CA1019: Define accessors for attribute arguments
Literal suffixes should be upper case
CA1709: Identifiers should be cased correctly
CA1702: Compound words should be cased correctly
Lines should have sufficient coverage by unit tests
Generic exceptions should not be ignored
Exceptions should not be explicitly rethrown
